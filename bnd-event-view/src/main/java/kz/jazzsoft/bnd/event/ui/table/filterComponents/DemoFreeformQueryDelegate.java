package kz.jazzsoft.bnd.event.ui.table.filterComponents;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.List;import com.vaadin.data.Container.Filter;import com.vaadin.data.util.sqlcontainer.RowItem;import com.vaadin.data.util.sqlcontainer.query.FreeformStatementDelegate;import com.vaadin.data.util.sqlcontainer.query.OrderBy;import com.vaadin.data.util.sqlcontainer.query.generator.StatementHelper;import com.vaadin.data.util.sqlcontainer.query.generator.filter.QueryBuilder;public class DemoFreeformQueryDelegate implements FreeformStatementDelegate{	private List<Filter> filters;    private List<OrderBy> orderBys;    	@Override	@Deprecated	public String getQueryString(int offset, int limit)			throws UnsupportedOperationException {		// TODO Auto-generated method stub		return null;	}	@Override	@Deprecated	public String getCountQuery() throws UnsupportedOperationException {		// TODO Auto-generated method stub		return null;	}	@Override	public void setFilters(List<Filter> filters)			throws UnsupportedOperationException {		this.filters = filters;			}	@Override	public void setOrderBy(List<OrderBy> orderBys)			throws UnsupportedOperationException {		this.orderBys = orderBys;			}	@Override	public int storeRow(Connection conn, RowItem row)			throws UnsupportedOperationException, SQLException {		// TODO Auto-generated method stub		return 0;	}	@Override	public boolean removeRow(Connection conn, RowItem row)			throws UnsupportedOperationException, SQLException {		PreparedStatement statement = conn                .prepareStatement("DELETE FROM bnd_event WHERE id = ?");		int id = ( (Long) row.getItemProperty("id").getValue() ).intValue();        statement.setInt(1, id);        int rowsChanged = statement.executeUpdate();        statement.close();        return rowsChanged == 1;	}	@Override	@Deprecated	public String getContainsRowQueryString(Object... keys)			throws UnsupportedOperationException {		// TODO Auto-generated method stub		return null;	}	@Override	public StatementHelper getQueryStatement(int offset, int limit)			throws UnsupportedOperationException {		        StatementHelper sh = new StatementHelper();        StringBuffer query = new StringBuffer("select e.id, e.ref_user, d.name, e.component_name, e.module_name, " +    					"e.description, u.login, e.date_time, e.resource " +    					"from bnd_event e " +    					"inner join bnd_event_type d on e.ref_event_type=d.id " +    					"inner join bnd_users u on e.ref_user=u.id");        if (filters != null) {            query.append(QueryBuilder.getWhereStringForFilters(                    filters, sh));        }        //query.append(getOrderByString());        if (offset != 0 || limit != 0) {            query.append(" LIMIT ").append(limit);            query.append(" OFFSET ").append(offset);        }        sh.setQueryString(query.toString());        return sh;	}	@Override	public StatementHelper getCountStatement()			throws UnsupportedOperationException {		StatementHelper sh = new StatementHelper();        StringBuffer query = new StringBuffer("SELECT COUNT(*) FROM bnd_event");        if (filters != null) {            query.append(QueryBuilder.getWhereStringForFilters(                    filters, sh));        }        sh.setQueryString(query.toString());        return sh;	}	@Override	public StatementHelper getContainsRowQueryStatement(Object... keys)			throws UnsupportedOperationException {		StatementHelper sh = new StatementHelper();        StringBuffer query = new StringBuffer(                "SELECT * FROM bnd_event WHERE ID = ?");        sh.addParameterValue(keys[0]);        sh.setQueryString(query.toString());        return sh;	}}