package kz.jazzsoft.bnd.event.ui.table.containers;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.text.SimpleDateFormat;import java.util.Date;public class PgSQLOperations {		Dbconfig dbconfig = new Dbconfig();    	String directory = directory();		 /**     * unzip backup and dearchive it to bnd_event_archive DB by pg_restore file     * @param file_name - selected archive name     */    public void restore(String file_name){	    	        try{        	Process p;        	ProcessBuilder pb;        	        	pb = new ProcessBuilder(         	    dbconfig.getPG_restore() ,        	    "--ignore-version",        	    "--host", dbconfig.getDBIP(),        	    "--port", dbconfig.getDBPort(),        	    "--username", dbconfig.getUserName(),        	    "-d", dbconfig.getDBArchiveName(),        	    "--verbose",        	    "--clean",        	            	    directory+"/"+file_name+"/"+file_name+".backup" );        	pb.redirectErrorStream(true);        	p = pb.start();        	InputStream is = p.getInputStream();        	InputStreamReader isr = new InputStreamReader(is);        	BufferedReader br = new BufferedReader(isr);        	String ll;        	while ((ll = br.readLine()) != null) {        	 System.out.println(ll);        	}            }        catch(IOException x)            {                System.err.println("Could not invoke browser, command=");                System.err.println("Caught: " + x.getMessage());            }    }     /**     * Archives current DB and save it to directory we specified      * It creates process to archive and use pg_dumb file     */     public void backup()    {    	String file_name = prepareDirectory();        try        {        	        	Process p;        	ProcessBuilder pb;        	pb = new ProcessBuilder(         	    dbconfig.getPG_dump(),        	    "--host", dbconfig.getDBIP() ,        	    "--port", dbconfig.getDBPort(),        	    "--username", dbconfig.getUserName(),        	    "--verbose",        	    "-F", "c",        	    "-w",        	    "-f", directory+"/"+file_name+"/"+file_name+".backup",        	    dbconfig.getDBName());        	pb.redirectErrorStream(true);        	p = pb.start();        	InputStream is = p.getInputStream();        	InputStreamReader isr = new InputStreamReader(is);        	BufferedReader br = new BufferedReader(isr);        	String ll;        	while ((ll = br.readLine()) != null)         	{        	 System.out.println(ll);        	}                            	        }        catch(IOException x)            {                System.err.println("Could not invoke browser, command=");                System.err.println("Caught: " + x.getMessage());            }    }        private String prepareDirectory()    {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd  HH-mm-ss");		String file_name  = sdf.format(new Date()).toString();						File path = new File(directory+"/"+file_name);		if(!path.exists()) path.mkdirs();				return file_name;    }        public String directory()    {		String userHome=System.getProperty("user.home");		return userHome+"/bnd/event/archives";    }    }