package kz.jazzsoft.bnd.event.dal;import java.io.IOException;import java.util.List;import kz.jazzsoft.bnd.event.entity.Event;import kz.jazzsoft.bnd.event.entity.EventType;import kz.jazzsoft.bnd.event.entity.User;import org.apache.ibatis.session.SqlSession;public class Dal {		public  List<EventType> getEventTypes()throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		List<EventType> eventTypes;		try		{			eventTypes = session.selectList("EventMapper.selectEventTypes");		}		finally{			session.close();		}		return eventTypes;	}		public  EventType getEventTypeByCode(long code)throws IOException {		SqlSession session = SessionFactory.getSessionFactory().openSession();		EventType  event_type;		try		{			event_type = session.selectOne("EventMapper.selectEventTypeByCode", code);		}		finally{			session.close();		}		return event_type;	}				public  User selectUser(long id) throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		User user;		try		{			user = session.selectOne("EventMapper.selectUser", id);		}		finally		{			session.close();		}		return user;	}	public  int updateUser(User user)throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		int result;		try		{			result = session.update("EventMapper.updateUser", user);			session.commit();		}		finally		{			session.close();		}		return result;	}		public  int saveUser(User user)throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		int result;		try		{			result = session.insert("EventMapper.saveUser", user);			session.commit();		}		finally		{			session.close();		}		return result;	}		public  User getUserByUserId(long code) throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		User user;		try		{			user = session.selectOne("EventMapper.selectUserByUserId", code);		}		finally		{			session.close();		}		return user;	}		public  List<User> getUsers()throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		List<User> users;		try		{			users = session.selectList("EventMapper.selectUsers");		}		finally		{			session.close();		}		return users;	}				public  Event selectEvent(long id) throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		Event event;		try		{			event = session.selectOne("EventMapper.selectEvent", id);		}		finally		{			session.close();		}		return event;	}		public  List<Event> selectAllEvent() throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		List<Event> events;		try		{			events = session.selectList("EventMapper.selectAllEvent");		}		finally		{			session.close();		}		return events;	}		public  int updateEvent(Event event) throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		int result;		try		{			result = session.update("EventMapper.updateEvent", event);			session.commit();		}		finally		{			session.close();		}		return result;	}		public  int saveEvent(Event event) throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		int result;		try		{			result = session.insert("EventMapper.saveEvent", event);			session.commit();		}		finally		{			session.close();		}		return result;	}		public  int deleteEvent(long id)throws IOException{		SqlSession session = SessionFactory.getSessionFactory().openSession();		int result;		try		{			result = session.delete("EventMapper.deleteEvent", id);			session.commit();		}		finally{			session.close();		}		return result;	}}