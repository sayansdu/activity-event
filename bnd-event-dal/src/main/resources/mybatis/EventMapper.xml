<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="EventMapper">	<resultMap id="bnd_users" type="kz.jazzsoft.bnd.event.entity.User">		<id column="id" property="id" />		<result column="login" property="login" />		<result column="user_id" property="userid" />	</resultMap>		<resultMap type="kz.jazzsoft.bnd.event.entity.Event" id="bnd_event">		<id column="id" property="id" />		<result column="component_name" property="componentName" />		<result column="module_name" property="moduleName" />		<result column="resource" property="resource" />		<result column="description"  property="description"/> 		<result column="date_time" property="dateTime" />		<association property="user" column="ref_user" javaType="kz.jazzsoft.bnd.event.entity.User" select="getUser" />		<association property="eventType" column="ref_event_type" javaType="kz.jazzsoft.bnd.event.entity.EventType" select="getEventTypeById">			</association>	</resultMap>		<resultMap type="kz.jazzsoft.bnd.event.entity.EventType" id="bnd_event_type">		<id column="id" property="id"/>		<result column="name" property="name" />		<result column="code" property="code" />	</resultMap>			<select id="getUser" resultMap="bnd_users" parameterType="long" statementType="CALLABLE">		{call getuserbyid(#{id, jdbcType=BIGINT, mode=IN})}	</select>	<select id="getUserByUserId" resultMap="bnd_users" parameterType="long" statementType="CALLABLE">		{call getuserbyuserid(#{userid, jdbcType=BIGINT, mode=IN})}	</select>		<select id="getUsers" resultMap="bnd_users" statementType="CALLABLE">		{call getusers()}	</select>		<insert id="saveUser" parameterType="kz.jazzsoft.bnd.event.entity.User" useGeneratedKeys="true" keyProperty="id" keyColumn="id" statementType="CALLABLE">		<selectKey keyProperty="id" resultType="long" order="BEFORE">			select nextVal('public.hibernate_sequence')		</selectKey>			{call adduser(  #{id, jdbcType=BIGINT, mode=IN}, 							#{login, jdbcType=VARCHAR, mode=IN}, 							#{userId, jdbcType=BIGINT, mode=IN})}	</insert>		<update id="updateUser" parameterType="kz.jazzsoft.bnd.event.entity.User">		update bnd_users set			login = #{login}, userid = #{userid}		where id = #{id}	</update>		<select id="getEvent" parameterType="long" resultMap="bnd_event" statementType="CALLABLE">		{call geteventbyid(#{id, jdbcType=BIGINT, mode=IN})}	</select>	<select id="getEvents" resultMap="bnd_event" statementType="CALLABLE">		{call getevents()}	</select>		<insert id="saveEvent" parameterType="kz.jazzsoft.bnd.event.entity.Event" useGeneratedKeys="true" statementType="CALLABLE">		<selectKey keyProperty="id" resultType="long" order="BEFORE">            SELECT nextVal('public.hibernate_sequence')            <!-- or ->  SELECT my_sequence.nextVal from dual   -->        </selectKey>		{call addevent( #{id, jdbcType=BIGINT, mode=IN},						#{eventType.id, jdbcType=BIGINT, mode=IN},						#{componentName, jdbcType=VARCHAR, mode=IN},						#{moduleName, jdbcType=VARCHAR, mode=IN},						#{description, jdbcType=VARCHAR, mode=IN},						#{user.id, jdbcType=TIMESTAMP, mode=IN},						#{dateTime, jdbcType=BIGINT, mode=IN},						#{resource, jdbcType=VARCHAR, mode=IN}						)}	</insert>		<update id="updateEvent" parameterType="kz.jazzsoft.bnd.event.entity.Event">		UPDATE bnd_event SET			ref_event_type = #{eventType},			component_name = #{componentName}, 			module_name = #{moduleName},			description = #{description},			ref_user = #{user},			date_time = #{dateTime},			resource = #{resource}		WHERE id = #{id}	</update>		<delete id="deleteEvent" parameterType="long">		delete from bnd_event where id = #{id}	</delete>	<select id="getEventTypeById" parameterType="long" resultMap="bnd_event_type" statementType="CALLABLE">		{call gettypebyid(#{id, jdbcType=BIGINT, mode=IN})}	</select>		<select id="getEventTypes" resultMap="bnd_event_type" statementType="CALLABLE">		{call gettypes()}	</select>		<select id="getEventTypeByCode" parameterType="long" resultMap="bnd_event_type" statementType="CALLABLE">		{call gettypebycode(#{code, jdbcType=BIGINT, mode=IN})}	</select>	</mapper>