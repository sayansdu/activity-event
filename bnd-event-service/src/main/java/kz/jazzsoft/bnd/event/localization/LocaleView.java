package kz.jazzsoft.bnd.event.localization;import com.github.peholmst.i18n4vaadin.I18N;import com.github.peholmst.i18n4vaadin.I18NComponent;import com.github.peholmst.i18n4vaadin.I18NListener;import com.github.peholmst.i18n4vaadin.support.I18NComponentSupport;import com.vaadin.data.Property;import com.vaadin.ui.Select;import com.vaadin.ui.VerticalLayout;import org.vaadin.browsercookies.BrowserCookies;import java.util.Locale;/** * Created by: dmitriy.lemeshenko * Created: 12.12.12 9:40 * Copyright © LLP JazzSoft */@SuppressWarnings("serial")public abstract class LocaleView extends VerticalLayout implements I18NComponent, I18NListener {    private final I18NComponentSupport support = new I18NComponentSupport(this);    private Select localizationSelect;    private BrowserCookies cookies;    @Override    public void setI18N(I18N i18N) {        support.setI18N(i18N);    }    @Override    public I18N getI18N() {        return support.getI18N();    }    /**     * Изменяю локаль     *     * @param i18N    - объект локали     * @param locale  - с какой локали     * @param locale1 - на какую локаль     */    @Override    public void localeChanged(I18N i18N, Locale locale, Locale locale1) {        update();    }    /**     * Отключаю локализацию     */    @Override    public void detach() {        getI18N().removeListener(this);        super.detach();    }    /**     * Подключаю локализацию ко вьюхе и изменяю значение в селекте     */    @Override    public void attach() {    	super.attach();        update();        if (localizationSelect != null) {            BrowserCookies cookies = getCookies();            if (cookies != null) {                localizationSelect.setValue(cookies.getCookie("language"));            } else {                BrowserCookies cookies1 = new BrowserCookies();                setCookies(cookies1);                cookies1.setCookie("language", getI18N().getCurrentLocale().getLanguage());                localizationSelect.setValue(getI18N().getCurrentLocale().getLanguage());            }        }        getI18N().addListener(this);    }    /**     * Меняю текущую локаль     *     * @param locale     */    public void changeLocale(Locale locale) {        getI18N().setCurrentLocale(locale);    }    /**     * Вытаскиваю данные с файлов.properties     *     * @param property - название свойства     * @return строка в соответствии с локалью     */    public String setLocaleValue(String property) {        return getI18N().getMessage(property);    }    /**     * Создаю селект для смены локали     *     * @return select     */    public Select createLocalizationSelect() {        localizationSelect = new Select();        localizationSelect.setNullSelectionAllowed(false);        localizationSelect.setInvalidAllowed(false);        localizationSelect.setImmediate(true);        localizationSelect.addListener(new Property.ValueChangeListener() {            @Override            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {                String localeValue = localizationSelect.getValue().toString();                changeLocale(new Locale(localeValue));                if (getCookies() != null) {                    getCookies().setCookie("language", localeValue);                }            }        });        return localizationSelect;    }    /**     * Добавляю новый язык в список языков     *     * @param value   - значение локали     * @param caption - текст локали     */    public void addLanguage(String value, String caption) {        localizationSelect.addItem(value);        localizationSelect.setItemCaption(value, caption);    }        public BrowserCookies getCookies() {        return cookies;    }    public void setCookies(BrowserCookies cookies) {        this.cookies = cookies;    }        /**     * Обновляю значения в полях при смене языка     */    public abstract void update();    }